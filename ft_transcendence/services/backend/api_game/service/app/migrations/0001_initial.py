# Generated by Django 5.1.3 on 2024-11-27 20:27

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='PlayerModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(default=0)),
                ('user_name', models.CharField(max_length=30)),
                ('score', models.IntegerField(default=0)),
                ('nickname', models.CharField(max_length=30)),
                ('player_index', models.IntegerField(default=0)),
                ('user_info', models.JSONField(blank=True, default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='GameModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_custom_name', models.CharField(default='game_custom_name', max_length=30)),
                ('score_to_win', models.IntegerField(default=3)),
                ('match_type', models.CharField(choices=[('1v1', '1 vs 1'), ('2v2', '2 vs 2')], default='1v1', max_length=10)),
                ('game_type', models.CharField(choices=[('pong', 'Pong'), ('snake', 'Snake')], default='pong', max_length=20)),
                ('status', models.CharField(choices=[('waiting', 'Waiting for all the players'), ('playing', 'Game in progress'), ('ready_to_play', 'Ready to play'), ('abandoned', 'Game abandoned'), ('finished', 'Game finished')], default='waiting', max_length=20)),
                ('tournament_id', models.IntegerField(default=0)),
                ('ball_speed', models.FloatField(default=1.0)),
                ('color_board', models.CharField(default='#ffffff', max_length=7)),
                ('color_ball', models.CharField(default='#e48d2d', max_length=7)),
                ('color_wall', models.CharField(default='#e48d2d', max_length=7)),
                ('color_paddle', models.CharField(default='#ffffff', max_length=7)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('players', models.ManyToManyField(related_name='games', to='app.playermodel')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tournament_custom_name', models.CharField(default='tournament_custom_name', max_length=30)),
                ('score_to_win', models.IntegerField(default=3)),
                ('player_count', models.IntegerField(default=0)),
                ('match_type', models.CharField(choices=[('1v1', '1 vs 1'), ('2v2', '2 vs 2')], default='1v1', max_length=10)),
                ('game_type', models.CharField(choices=[('pong', 'Pong'), ('snake', 'Snake')], default='pong', max_length=20)),
                ('status', models.CharField(choices=[('waiting', 'Waiting for all the players'), ('playing', 'Game in progress'), ('finished', 'Game finished')], default='waiting', max_length=20)),
                ('ball_speed', models.FloatField(default=1.0)),
                ('color_board', models.CharField(default='#FFFFFF', max_length=7)),
                ('color_ball', models.CharField(default='#E48D2D', max_length=7)),
                ('color_wall', models.CharField(default='#E48D2D', max_length=7)),
                ('color_paddle', models.CharField(default='#FFFFFF', max_length=7)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('games', models.ManyToManyField(related_name='tournaments', to='app.gamemodel')),
                ('players', models.ManyToManyField(related_name='tournaments', to='app.playermodel')),
            ],
        ),
    ]
